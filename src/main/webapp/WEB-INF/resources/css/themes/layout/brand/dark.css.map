{"version":3,"sources":["../../../../tools/node_modules/bootstrap/scss/mixins/_breakpoints.scss","layout/brand/dark.scss","../components/mixins/_svg-icon.scss","../components/_variables.demo.scss","../components/mixins/_burger-icon.scss"],"names":[],"mappings":"AA4DI,yBCzCH,OACI,wBAZM,CAaN,uBAAY,CAAZ,eAAY,CAFhB,cAOG,aAjBe,CAUlB,mCCVe,gCAAY,CAAZ,wBAAY,CACZ,YDDG,CAUlB,yCCFmB,gCAAY,CAAZ,wBAAY,CDE/B,mFCVe,gCAAY,CAAZ,wBAAY,CACZ,YCFS,CFWxB,+FCFmB,gCAAY,CAAZ,wBAAY,CDE/B,yCAqBI,aEhCoB,CAAA,CHiErB,4BCxBH,eACC,wBAtCiB,CAqClB,iCGyFE,wBH5HwB,CAmC1B,iFG6FI,wBHhIsB,CAmC1B,uCGoGK,wBD7ImB,CFyCxB,6FGwGK,wBDjJmB,CFyCxB,wCGgHK,wBDzJmB,CFyCxB,+FGoHK,wBD7JmB,CFyCxB,sBAYG,aA/CuB,CAmC1B,2CCxCe,gCAAY,CAAZ,wBAAY,CACZ,YDIW,CAmC1B,iDChCmB,gCAAY,CAAZ,wBAAY,CDgC/B,mGCxCe,gCAAY,CAAZ,wBAAY,CACZ,YCFS,CFyCxB,+GChCmB,gCAAY,CAAZ,wBAAY,CDgC/B,yDA0BI,aEnEoB,CAAA","file":"dark.css","sourcesContent":["// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","//\r\n// Brand Dark theme\r\n//\r\n\r\n// Initialization of global variables, mixins and functions\r\n@import \"../../../init\";\r\n\r\n// Variables\r\n$brand-bg: #1a1a27;\r\n$brand-icon-color: #494b74;\r\n$brand-icon-color-hover: $primary;\r\n\r\n$header-mobile-bg: #1a1a27;\r\n$header-mobile-shadow: 0px 1px 9px -3px rgba(0,0,0,0.1);\r\n$header-mobile-icon-color: #484f66;\r\n$header-mobile-icon-color-hover: $primary;\r\n\r\n// Desktop Mode\r\n@include media-breakpoint-up(lg) {\r\n\t.brand {\r\n\t    background-color: $brand-bg;\r\n    \tbox-shadow: none;\r\n\r\n\t\t// Button\r\n\t\t.btn {\r\n\t\t\ti {\r\n\t\t\t\tcolor: $brand-icon-color;\r\n\t\t\t}\r\n\r\n\t\t\t.svg-icon {\r\n\t\t\t\t@include svg-icon-color($brand-icon-color);\r\n\t\t\t}\r\n\r\n\t\t\t&.active,\r\n\t\t\t&:hover {\r\n\t\t\t\t.svg-icon {\r\n\t\t\t\t\t@include svg-icon-color($brand-icon-color-hover);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti {\r\n\t\t\t\t\tcolor: $brand-icon-color-hover;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Tablet & Mobile Modes\r\n@include media-breakpoint-down(md) {\r\n\t.header-mobile {\r\n\t\tbackground-color: $header-mobile-bg;\r\n\t\t//box-shadow: $header-mobile-shadow;\r\n\r\n\t\t// Burger Icon\r\n\t\t.burger-icon {\r\n\t\t\t@include burger-icon-theme($header-mobile-icon-color, $header-mobile-icon-color-hover, $header-mobile-icon-color-hover);\r\n\t\t}\r\n\r\n\t\t// Button\r\n\t\t.btn {\r\n\t\t\ti {\r\n\t\t\t\tcolor: $header-mobile-icon-color;\r\n\t\t\t}\r\n\r\n\t\t\t.svg-icon {\r\n\t\t\t\t@include svg-icon-color($header-mobile-icon-color);\r\n\t\t\t}\r\n\r\n\t\t\t&.active,\r\n\t\t\t&:hover {\r\n\t\t\t\t.svg-icon {\r\n\t\t\t\t\t@include svg-icon-color($header-mobile-icon-color-hover);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti {\r\n\t\t\t\t\tcolor: $header-mobile-icon-color-hover;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","//\r\n// SVG Icon\r\n//\r\n\r\n\r\n@mixin svg-icon-color($color, $important: false) {\r\n    svg {\r\n        g {\r\n            [fill] {\r\n                transition: fill 0.3s ease;\r\n                fill: $color valueif($important, !important, null);\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            g {\r\n                [fill] {\r\n                    transition: fill 0.3s ease;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin svg-icon-transition() {\r\n    svg {\r\n        g {\r\n            [fill] {\r\n                transition: fill 0.3s ease;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin svg-icon-size($size, $important: false) {\r\n    svg {\r\n        height: $size valueif($important, !important, null);\r\n        width: $size valueif($important, !important, null);\r\n    }\r\n}\r\n\r\n@mixin svg-logo-color($color, $important: false){\r\n    svg{\r\n        path{\r\n            fill: $color valueif($important, !important, null);\r\n        }\r\n    }\r\n}","//\r\n// To make future updates easier consider overriding the global variables from _variables.bootstrap.scss and _variables.custom.scss for current demo in this file.\r\n// Note that this file is included first and variables defined in _variables.bootstrap.scss and _variables.custom.scss\r\n// are not accessible in this file but you can override any global variable as shown below:\r\n//\r\n\r\n// Theme colors\r\n// Override primary color variants\r\n$primary:       \t\t\t\t\t\t\t\t\t#3699FF; // Bootstrap variable\r\n$primary-hover:    \t\t\t\t\t\t\t\t\t#187DE4; // Custom variable\r\n$primary-light:    \t\t\t\t\t\t\t\t\t#E1F0FF; // Custom variable\r\n$primary-inverse:  \t\t\t\t\t\t\t\t\t#FFFFFF; // Custom variable\r\n","//\r\n// Burger Icon Mixins\r\n//\r\n\r\n@mixin burger-icon-build($config) {\r\n\t$space: get($config, thickness) + get($config, space);\r\n\r\n\t@include button-reset();\r\n\r\n\tdisplay: inline-block;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tfont-size: 0;\r\n\ttext-indent: -9999px;\r\n\tappearance: none;\r\n\tbox-shadow: none;\r\n\tborder-radius: none;\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\tbackground-color:none;\r\n\toutline: none !important;\r\n\twidth: get($config, width);\r\n\theight: get($config, height);\r\n\ttransition: get($config, transition);\r\n\r\n\tspan {\r\n\t\tdisplay: block;\r\n  \t\tposition: absolute;\r\n\t\t@include border-radius(get($config, radius));\r\n\t\ttransition: get($config, transition);\r\n  \t\ttop: (get($config, height) / 2) - (get($config, thickness)) + 1px;\r\n  \t\theight: get($config, thickness);\r\n  \t\tmin-height: get($config, thickness);\r\n  \t\twidth: 100%;\r\n\r\n  \t\t&::before,\r\n  \t\t&::after {\r\n  \t\t\tposition: absolute;\r\n\t\t  \tdisplay: block;\r\n\t\t  \tleft: 0;\r\n\t\t  \twidth: 100%;\r\n\t\t  \theight: get($config, thickness);\r\n\t\t  \tmin-height: get($config, thickness);\r\n\t\t  \tcontent: \"\";\r\n\t\t  \ttransition: get($config, transition);\r\n\t\t\t@include border-radius(get($config, radius));\r\n  \t\t}\r\n\r\n  \t\t&::before {\r\n  \t\t\ttop: -($space);\r\n  \t\t}\r\n\r\n  \t\t&::after {\r\n  \t\t\tbottom: -($space);\r\n  \t\t}\r\n\t}\r\n\r\n    // Left Direction\r\n    &-left {\r\n    \tspan {\r\n    \t\t&:before {\r\n    \t\t\ttransition: get($config, transition);\r\n    \t\t\tleft: auto;\r\n    \t\t\tright: 0px;\r\n    \t\t\twidth: 50%;\r\n    \t\t}\r\n\r\n    \t\t&:after {\r\n    \t\t\ttransition: get($config, transition);\r\n    \t\t\tleft: auto;\r\n    \t\t\tright: 0px;\r\n    \t\t\twidth: 75%;\r\n    \t\t}\r\n    \t}\r\n\r\n    \t// Active State\r\n\t    &-active {\r\n\t    \tspan {\r\n\t    \t\t&:before {\r\n\t    \t\t\ttransition: get($config, transition);\r\n\t    \t\t\tleft: 0px;\r\n\t    \t\t\tright: auto;\r\n\t    \t\t\twidth: 50%;\r\n\t    \t\t}\r\n\r\n\t    \t\t&:after {\r\n\t    \t\t\ttransition: get($config, transition);\r\n\t    \t\t\tleft: 0px;\r\n\t    \t\t\tright: auto;\r\n\t    \t\t\twidth: 75%;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    }\r\n    }\r\n\r\n    // Right Direction\r\n    &-right {\r\n    \tspan {\r\n\t    \t&:before {\r\n\t    \t\tleft: 0px;\r\n\t    \t\tright: auto;\r\n\t    \t\twidth: 50%;\r\n\t    \t\ttransition: get($config, transition);\r\n\t    \t}\r\n\r\n\t    \t&:after {\r\n\t    \t\tleft: 0px;\r\n\t    \t\tright: auto;\r\n\t    \t\twidth: 75%;\r\n\t    \t\ttransition: get($config, transition);\r\n\t    \t}\r\n\t    }\r\n\r\n    \t// Active State\r\n\t    &-active {\r\n\t    \tspan {\r\n\t    \t\t&:before {\r\n\t    \t\t\tleft: auto;\r\n    \t\t\t\tright: 0px;\r\n\t    \t\t\twidth: 50%;\r\n\t    \t\t\ttransition: get($config, transition);\r\n\t    \t\t}\r\n\r\n\t    \t\t&:after {\r\n\t    \t\t\tleft: auto;\r\n    \t\t\t\tright: 0px;\r\n\t    \t\t\twidth: 75%;\r\n\t    \t\t\ttransition: get($config, transition);\r\n\t    \t\t}\r\n\t    \t}\r\n\t    }\r\n    }\r\n}\r\n\r\n@mixin burger-icon-theme($default, $hover, $active) {\r\n\tspan {\r\n \t\tbackground-color: $default;\r\n\r\n  \t\t&::before,\r\n  \t\t&::after {\r\n\t\t  \tbackground-color: $default;\r\n  \t\t}\r\n\t}\r\n\r\n    // Hover State\r\n    &:hover {\r\n    \tspan {\r\n\t    \tbackground-color: $hover;\r\n\r\n\t    \t&::before,\r\n\t  \t\t&::after {\r\n\t  \t\t\tbackground-color: $hover;\r\n\t  \t\t}\r\n\t  \t}\r\n    }\r\n\r\n\t// Active State\r\n    &-active {\r\n\t\tspan {\r\n\t    \tbackground-color: $active;\r\n\r\n\t    \t&::before,\r\n\t  \t\t&::after {\r\n\t  \t\t\tbackground-color: $active;\r\n\t  \t\t}\r\n\t  \t}\r\n\t}\r\n}\r\n"]}