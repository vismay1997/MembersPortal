{"version":3,"sources":["autoresize/plugin.js"],"names":["global","tinymce","util","Tools","resolve","global$1","global$2","getAutoResizeMinHeight","editor","getParam","getElement","offsetHeight","wait","oldSize","times","interval","callback","setEditorTimeout","resize","toggleScrolling","state","body","getBody","style","overflowY","scrollTop","parseCssValueToInt","dom","elm","name","computed","value","parseInt","getStyle","isNaN","doc","getDoc","plugins","fullscreen","isFullscreen","docEle","documentElement","resizeBottomMargin","getAutoResizeBottomMargin","resizeHeight","marginTop","marginBottom","contentHeight","chromeHeight","getContainer","getContentAreaContainer","maxHeight","getAutoResizeMaxHeight","get","deltaSize","setStyle","set","fire","fireResizeEditor","browser","isSafari","mac","win","getWin","scrollTo","pageXOffset","pageYOffset","hasFocus","selection","scrollIntoView","getNode","webkit","add","settings","hasOwnProperty","inline","v","addCommand","register","on","overflowPadding","getAutoResizeOverflowPadding","setStyles","height","paddingLeft","paddingRight","min-height","shouldAutoResizeOnInit","setup"],"mappings":"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","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.6.2 (2020-12-08)\n */\n(function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      return {\n        get: get,\n        set: set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var fireResizeEditor = function (editor) {\n      return editor.fire('ResizeEditor');\n    };\n\n    var getAutoResizeMinHeight = function (editor) {\n      return editor.getParam('min_height', editor.getElement().offsetHeight, 'number');\n    };\n    var getAutoResizeMaxHeight = function (editor) {\n      return editor.getParam('max_height', 0, 'number');\n    };\n    var getAutoResizeOverflowPadding = function (editor) {\n      return editor.getParam('autoresize_overflow_padding', 1, 'number');\n    };\n    var getAutoResizeBottomMargin = function (editor) {\n      return editor.getParam('autoresize_bottom_margin', 50, 'number');\n    };\n    var shouldAutoResizeOnInit = function (editor) {\n      return editor.getParam('autoresize_on_init', true, 'boolean');\n    };\n\n    var isFullscreen = function (editor) {\n      return editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    };\n    var wait = function (editor, oldSize, times, interval, callback) {\n      global$2.setEditorTimeout(editor, function () {\n        resize(editor, oldSize);\n        if (times--) {\n          wait(editor, oldSize, times, interval, callback);\n        } else if (callback) {\n          callback();\n        }\n      }, interval);\n    };\n    var toggleScrolling = function (editor, state) {\n      var body = editor.getBody();\n      if (body) {\n        body.style.overflowY = state ? '' : 'hidden';\n        if (!state) {\n          body.scrollTop = 0;\n        }\n      }\n    };\n    var parseCssValueToInt = function (dom, elm, name, computed) {\n      var value = parseInt(dom.getStyle(elm, name, computed), 10);\n      return isNaN(value) ? 0 : value;\n    };\n    var resize = function (editor, oldSize) {\n      var dom = editor.dom;\n      var doc = editor.getDoc();\n      if (!doc) {\n        return;\n      }\n      if (isFullscreen(editor)) {\n        toggleScrolling(editor, true);\n        return;\n      }\n      var docEle = doc.documentElement;\n      var resizeBottomMargin = getAutoResizeBottomMargin(editor);\n      var resizeHeight = getAutoResizeMinHeight(editor);\n      var marginTop = parseCssValueToInt(dom, docEle, 'margin-top', true);\n      var marginBottom = parseCssValueToInt(dom, docEle, 'margin-bottom', true);\n      var contentHeight = docEle.offsetHeight + marginTop + marginBottom + resizeBottomMargin;\n      if (contentHeight < 0) {\n        contentHeight = 0;\n      }\n      var containerHeight = editor.getContainer().offsetHeight;\n      var contentAreaHeight = editor.getContentAreaContainer().offsetHeight;\n      var chromeHeight = containerHeight - contentAreaHeight;\n      if (contentHeight + chromeHeight > getAutoResizeMinHeight(editor)) {\n        resizeHeight = contentHeight + chromeHeight;\n      }\n      var maxHeight = getAutoResizeMaxHeight(editor);\n      if (maxHeight && resizeHeight > maxHeight) {\n        resizeHeight = maxHeight;\n        toggleScrolling(editor, true);\n      } else {\n        toggleScrolling(editor, false);\n      }\n      if (resizeHeight !== oldSize.get()) {\n        var deltaSize = resizeHeight - oldSize.get();\n        dom.setStyle(editor.getContainer(), 'height', resizeHeight + 'px');\n        oldSize.set(resizeHeight);\n        fireResizeEditor(editor);\n        if (global$1.browser.isSafari() && global$1.mac) {\n          var win = editor.getWin();\n          win.scrollTo(win.pageXOffset, win.pageYOffset);\n        }\n        if (editor.hasFocus()) {\n          editor.selection.scrollIntoView(editor.selection.getNode());\n        }\n        if (global$1.webkit && deltaSize < 0) {\n          resize(editor, oldSize);\n        }\n      }\n    };\n    var setup = function (editor, oldSize) {\n      editor.on('init', function () {\n        var overflowPadding = getAutoResizeOverflowPadding(editor);\n        var dom = editor.dom;\n        dom.setStyles(editor.getDoc().documentElement, { height: 'auto' });\n        dom.setStyles(editor.getBody(), {\n          'paddingLeft': overflowPadding,\n          'paddingRight': overflowPadding,\n          'min-height': 0\n        });\n      });\n      editor.on('NodeChange SetContent keyup FullscreenStateChanged ResizeContent', function () {\n        resize(editor, oldSize);\n      });\n      if (shouldAutoResizeOnInit(editor)) {\n        editor.on('init', function () {\n          wait(editor, oldSize, 20, 100, function () {\n            wait(editor, oldSize, 5, 1000);\n          });\n        });\n      }\n    };\n\n    var register = function (editor, oldSize) {\n      editor.addCommand('mceAutoResize', function () {\n        resize(editor, oldSize);\n      });\n    };\n\n    function Plugin () {\n      global.add('autoresize', function (editor) {\n        if (!editor.settings.hasOwnProperty('resize')) {\n          editor.settings.resize = false;\n        }\n        if (!editor.inline) {\n          var oldSize = Cell(0);\n          register(editor, oldSize);\n          setup(editor, oldSize);\n        }\n      });\n    }\n\n    Plugin();\n\n}());\n"]}