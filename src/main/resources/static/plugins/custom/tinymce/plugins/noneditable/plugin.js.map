{"version":3,"sources":["noneditable/plugin.js"],"names":["global","tinymce","util","Tools","resolve","global$1","getNonEditableClass","editor","getParam","hasClass","checkClassName","node","attr","indexOf","replaceMatchWithSpan","content","cls","match","args","arguments","index","length","prevChar","charAt","findStartTagIndex","lastIndexOf","tagHtml","substring","dom","encode","setup","contentEditableAttrName","editClass","trim","getEditableClass","nonEditClass","hasEditClass","hasNonEditClass","nonEditableRegExps","constructor","RegExp","getNonEditableRegExps","on","e","i","format","replace","convertRegExpsToNonEditable","parser","addAttributeFilter","nodes","serializer","name","type","raw","value","add"],"mappings":"CAQC,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCE,EAAsB,SAAUC,GAClC,OAAOA,EAAOC,SAAS,gCAAiC,mBActDC,EAAW,SAAUC,GACvB,OAAO,SAAUC,GACf,OAAqE,KAA7D,IAAMA,EAAKC,KAAK,SAAW,KAAKC,QAAQH,KAGhDI,EAAuB,SAAUP,EAAQQ,EAASC,GACpD,OAAO,SAAUC,GACf,IAAIC,EAAOC,UAAWC,EAAQF,EAAKA,EAAKG,OAAS,GAC7CC,EAAWF,EAAQ,EAAIL,EAAQQ,OAAOH,EAAQ,GAAK,GACvD,GAAiB,MAAbE,EACF,OAAOL,EAET,GAAiB,MAAbK,EAAkB,CACpB,IAAIE,EAAoBT,EAAQU,YAAY,IAAKL,GACjD,IAA2B,IAAvBI,EAA0B,CAC5B,IAAIE,EAAUX,EAAQY,UAAUH,EAAmBJ,GACnD,IAAoD,IAAhDM,EAAQb,QAAQ,2BAClB,OAAOI,GAIb,MAAO,gBAAkBD,EAAM,uBAAyBT,EAAOqB,IAAIC,OAAOX,EAAK,IAAM,KAAOX,EAAOqB,IAAIC,OAA0B,iBAAZX,EAAK,GAAkBA,EAAK,GAAKA,EAAK,IAAM,YAajKY,EAAQ,SAAUvB,GACpB,IAAIwB,EAA0B,kBAC1BC,EAAY,IAAM3B,EAAS4B,KAhDV,SAAU1B,GAC/B,OAAOA,EAAOC,SAAS,6BAA8B,eA+CjB0B,CAAiB3B,IAAW,IAC5D4B,EAAe,IAAM9B,EAAS4B,KAAK3B,EAAoBC,IAAW,IAClE6B,EAAe3B,EAASuB,GACxBK,EAAkB5B,EAAS0B,GAC3BG,EAjDsB,SAAU/B,GACpC,IAAI+B,EAAqB/B,EAAOC,SAAS,qBAAsB,IAC/D,OAAI8B,GAAsBA,EAAmBC,cAAgBC,OACpD,CAACF,GAEDA,EA4CgBG,CAAsBlC,GAC/CA,EAAOmC,GAAG,WAAW,WACfJ,EAAmBjB,OAAS,GAC9Bd,EAAOmC,GAAG,oBAAoB,SAAUC,IAnBZ,SAAUpC,EAAQ+B,EAAoBK,GACtE,IAAIC,EAAIN,EAAmBjB,OAAQN,EAAU4B,EAAE5B,QAC/C,GAAiB,QAAb4B,EAAEE,OAAN,CAGA,KAAOD,KACL7B,EAAUA,EAAQ+B,QAAQR,EAAmBM,GAAI9B,EAAqBP,EAAQQ,EAAST,EAAoBC,KAE7GoC,EAAE5B,QAAUA,GAYNgC,CAA4BxC,EAAQ+B,EAAoBK,MAG5DpC,EAAOyC,OAAOC,mBAAmB,SAAS,SAAUC,GAElD,IADA,IAAsBvC,EAAlBiC,EAAIM,EAAM7B,OACPuB,KACLjC,EAAOuC,EAAMN,GACTR,EAAazB,GACfA,EAAKC,KAAKmB,EAAyB,QAC1BM,EAAgB1B,IACzBA,EAAKC,KAAKmB,EAAyB,YAIzCxB,EAAO4C,WAAWF,mBAAmBlB,GAAyB,SAAUmB,GAEtE,IADA,IAAsBvC,EAAlBiC,EAAIM,EAAM7B,OACPuB,KACLjC,EAAOuC,EAAMN,IACRR,EAAazB,IAAU0B,EAAgB1B,MAGxC2B,EAAmBjB,OAAS,GAAKV,EAAKC,KAAK,qBAC7CD,EAAKyC,KAAO,QACZzC,EAAK0C,KAAO,EACZ1C,EAAK2C,KAAM,EACX3C,EAAK4C,MAAQ5C,EAAKC,KAAK,qBAEvBD,EAAKC,KAAKmB,EAAyB,cAQ3C/B,EAAOwD,IAAI,eAAe,SAAUjD,GAClCuB,EAAMvB,MAtGd","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.6.2 (2020-12-08)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getNonEditableClass = function (editor) {\n      return editor.getParam('noneditable_noneditable_class', 'mceNonEditable');\n    };\n    var getEditableClass = function (editor) {\n      return editor.getParam('noneditable_editable_class', 'mceEditable');\n    };\n    var getNonEditableRegExps = function (editor) {\n      var nonEditableRegExps = editor.getParam('noneditable_regexp', []);\n      if (nonEditableRegExps && nonEditableRegExps.constructor === RegExp) {\n        return [nonEditableRegExps];\n      } else {\n        return nonEditableRegExps;\n      }\n    };\n\n    var hasClass = function (checkClassName) {\n      return function (node) {\n        return (' ' + node.attr('class') + ' ').indexOf(checkClassName) !== -1;\n      };\n    };\n    var replaceMatchWithSpan = function (editor, content, cls) {\n      return function (match) {\n        var args = arguments, index = args[args.length - 2];\n        var prevChar = index > 0 ? content.charAt(index - 1) : '';\n        if (prevChar === '\"') {\n          return match;\n        }\n        if (prevChar === '>') {\n          var findStartTagIndex = content.lastIndexOf('<', index);\n          if (findStartTagIndex !== -1) {\n            var tagHtml = content.substring(findStartTagIndex, index);\n            if (tagHtml.indexOf('contenteditable=\"false\"') !== -1) {\n              return match;\n            }\n          }\n        }\n        return '<span class=\"' + cls + '\" data-mce-content=\"' + editor.dom.encode(args[0]) + '\">' + editor.dom.encode(typeof args[1] === 'string' ? args[1] : args[0]) + '</span>';\n      };\n    };\n    var convertRegExpsToNonEditable = function (editor, nonEditableRegExps, e) {\n      var i = nonEditableRegExps.length, content = e.content;\n      if (e.format === 'raw') {\n        return;\n      }\n      while (i--) {\n        content = content.replace(nonEditableRegExps[i], replaceMatchWithSpan(editor, content, getNonEditableClass(editor)));\n      }\n      e.content = content;\n    };\n    var setup = function (editor) {\n      var contentEditableAttrName = 'contenteditable';\n      var editClass = ' ' + global$1.trim(getEditableClass(editor)) + ' ';\n      var nonEditClass = ' ' + global$1.trim(getNonEditableClass(editor)) + ' ';\n      var hasEditClass = hasClass(editClass);\n      var hasNonEditClass = hasClass(nonEditClass);\n      var nonEditableRegExps = getNonEditableRegExps(editor);\n      editor.on('PreInit', function () {\n        if (nonEditableRegExps.length > 0) {\n          editor.on('BeforeSetContent', function (e) {\n            convertRegExpsToNonEditable(editor, nonEditableRegExps, e);\n          });\n        }\n        editor.parser.addAttributeFilter('class', function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (hasEditClass(node)) {\n              node.attr(contentEditableAttrName, 'true');\n            } else if (hasNonEditClass(node)) {\n              node.attr(contentEditableAttrName, 'false');\n            }\n          }\n        });\n        editor.serializer.addAttributeFilter(contentEditableAttrName, function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (!hasEditClass(node) && !hasNonEditClass(node)) {\n              continue;\n            }\n            if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n              node.name = '#text';\n              node.type = 3;\n              node.raw = true;\n              node.value = node.attr('data-mce-content');\n            } else {\n              node.attr(contentEditableAttrName, null);\n            }\n          }\n        });\n      });\n    };\n\n    function Plugin () {\n      global.add('noneditable', function (editor) {\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}